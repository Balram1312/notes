// Calculate the number of iterations needed
	iterations := len(arr) / 6
	if len(arr)%6 != 0 {
		iterations++
	}

-----------------------
concat ws
----------------------
	CONCAT_WS('</br>', NULLIF(firstname, ''), NULLIF(middlename, ''), NULLIF(secondname, '')) AS concatenated_names
---------------------
QR to base64
--------------------
	// Create the barcode
	qrCode, _ := qr.Encode(t1, qr.M, qr.Auto)

	// Scale the barcode to 2000x2000 pixels
	qrCode, _ = barcode.Scale(qrCode, 2000, 2000)

	// Encode the barcode as PNG
	var qrCodeBuffer bytes.Buffer
	if err := png.Encode(&qrCodeBuffer, qrCode); err != nil {
		log.Println("Error encoding QR Code: ", err)
		return
	}

	// Convert bytes to base64
	encodedStr := base64.StdEncoding.EncodeToString(qrCodeBuffer.Bytes())

	// Print the base64 encoded string
	log.Println(encodedStr)


dynamic row calculation
-------------------------------------------
// Recursive function to calculate the number of lines for cell content
func calculateRowsForCell(cellContent string, maxCellWidth int, avgCharWidth int) int {
	words := strings.Fields(cellContent)
	return countLines(words, maxCellWidth, avgCharWidth, 0, 0, 0)
}

// Helper recursive function to count lines
func countLines(words []string, maxCellWidth int, avgCharWidth int, currentLineLength int, lineCount int, wordIndex int) int {
	// Base case: If no more words, return the line count
	if wordIndex >= len(words) {
		return lineCount + 1 // Add 1 to account for the last line
	}

	// Calculate the length of the current word
	wordLength := len(words[wordIndex]) * avgCharWidth

	// Check if adding this word exceeds the max cell width
	if currentLineLength+wordLength > maxCellWidth {
		// If so, start a new line
		return countLines(words, maxCellWidth, avgCharWidth, wordLength+avgCharWidth, lineCount+1, wordIndex+1)
	}

	// Otherwise, add the word to the current line
	return countLines(words, maxCellWidth, avgCharWidth, currentLineLength+wordLength+avgCharWidth, lineCount, wordIndex+1)
}
